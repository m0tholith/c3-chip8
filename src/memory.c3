module chip8::memory;
import std::collections::priorityqueue;

const PC_START @builtin = 0x200;
const FONT_ADDR @builtin = 0x050;
char[4096] ram @builtin;
PriorityQueue{ushort} stack @builtin;
ushort vPC @builtin = PC_START;
char dT @builtin; // delay timer
char sT @builtin; // sound timer
ushort vI @builtin; // index register
char[0x10] vReg @builtin;

fn void init() @init
{
	stack.init(mem);
	// font
	ram[FONT_ADDR:80] = {
		0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
		0x20, 0x60, 0x20, 0x20, 0x70, // 1
		0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
		0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
		0x90, 0x90, 0xF0, 0x10, 0x10, // 4
		0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
		0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
		0xF0, 0x10, 0x20, 0x40, 0x40, // 7
		0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
		0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
		0xF0, 0x90, 0xF0, 0x90, 0x90, // A
		0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
		0xF0, 0x80, 0x80, 0x80, 0xF0, // C
		0xE0, 0x90, 0x90, 0x90, 0xE0, // D
		0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
		0xF0, 0x80, 0xF0, 0x80, 0x80  // F
	}[..];
}
fn void load_game(char[] game)
{
	ram[PC_START:game.len] = game[..];
}
fn void jump(ushort new_addr)
{
	vPC = new_addr;
}
fn void call_subroutine(ushort subroutine)
{
	stack.push(vPC);
	vPC = subroutine;
}
fn void ret_subroutine()
{
	if (try prev_PC = stack.pop())
	{
		vPC = prev_PC;
	}
}
fn void deinit() @finalizer
{
	stack.free();
}
